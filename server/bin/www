#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("server:server");
var http = require("http");
const { Server } = require("socket.io");
const {
  getConversationByID,
  updateStatusConversation,
} = require("../controller/chat");
const { getPostByID, getCommentByID } = require("../controller/post");
const { sendNotifyNewMessage } = require("../controller/notification");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = new Server(server, {
  cors: {
    // origin: "https://my-social-app-server.herokuapp.com",
    origin: "http://localhost:3000",
    // origin: "http://nodejs-server-env.ap-southeast-1.elasticbeanstalk.com",
    methods: ["GET", "POST"],
  },
});

const socketChat = io.of("/chat");

io.on("connection", (socket) => {
  socket.on("createPost", async (post) => {
    const response = await getPostByID(post._id);
    io.emit("updatePost", response);
  });

  socket.on("createComment", async (comment) => {
    const response = await getCommentByID(comment._id);
    io.emit("updateComment", response);
  });
});

socketChat.on("connection", (socket) => {
  socket.on("join room", async (roomID, userID) => {
    socket.join(roomID);
    await updateStatusConversation(roomID, userID);
    socketChat.emit("updateStatusConversation", roomID);
  });

  socket.on("sendMessage", async (roomID, message) => {
    socket.to(roomID).emit("receiverMessage", message);
    const data = await getConversationByID(roomID);
    socketChat.emit("updateConversation", data);
    if (socket.adapter.rooms.get(roomID).size === 1) {
      sendNotifyNewMessage(message);
    }
  });

  socket.on("leave room", async (roomID, userID) => {
    socket.leave(roomID);
    await updateStatusConversation(roomID, userID);
    socketChat.emit("updateStatusConversation", roomID);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
